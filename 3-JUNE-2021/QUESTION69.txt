//Subset Validation

//Write a function that returns true if all subsets in a list belong to a given set.
//
//Examples
//validateSubsets([[1, 2], [2, 3], [1, 3]], [1, 2, 3]) ➞ true
//
//validateSubsets([[1, 2, 3], [2], [3], []], [1, 2, 3]) ➞ true
//
//validateSubsets([[1, 2], [2, 3], [1, 4]], [1, 2, 3]) ➞ false
//
//validateSubsets([[1, 2, 3, 4]], [1, 2, 3]) ➞ false
//Notes
//The empty set and the set itself are both valid subsets of a set (we are not talking about proper subsets here).
//The set and the subset will each have unique elements.

#include<bits/stdc++.h>
using namespace std;

bool validateSubsets(std::vector<std::vector<int>> subsets, std::vector<int> set1)
{

    map<int,int>m;

    for(int i=0;i<set1.size();i++)
    {
        m[set1[i]]=1;
    }


    for(int i=0;i<subsets.size();i++)
    {
        for(int j=0;j<subsets[i].size();j++)
        {
            if(m.find(subsets[i][j])==m.end())
            {
                return false;
            }
        }
    }


	return true;
}


int main()
{

    int n,m;
   cout<<"Enter the number  of row in the array"<<endl;
   cin>>n;



   vector<vector<int>>subsets;


   for(int i=0;i<n;i++)
   {
     vector<int>temp;
     cout<<"Enter the number of column in the array"<<endl;
     cin>>m;
       for(int j=0;j<m;j++)
       {
           int a;
           cin>>a;
           temp.push_back(a);
       }
       subsets.push_back(temp);
   }


   int k;
   cout<<"Enter the number of element you want to enter in target array"<<endl;
   cin>>k;

   vector<int>set1;


   for(int i=0;i<k;i++)
   {
       int a;
       cin>>a;
       set1.push_back(a);
   }


   if(validateSubsets(subsets,set1))
   {
       cout<<"True"<<endl;
   }
   else
   {
       cout<<"False"<<endl;
   }




    return 0;

}
