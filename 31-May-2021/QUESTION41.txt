//Balanced Words


//We can assign a value to each character in a word, based on their position in the alphabet (a = 1, b = 2, ... , z = 26).
//A balanced word is one where the sum of values on the left-hand side of the word equals the sum of values on the right-hand side.
//For odd length words, the middle character (balance point) is ignored.
//
//Write a function that returns true if the word is balanced, and false if it's not.
//

#include<bits/stdc++.h>
using namespace std;

bool balanced(std::string word) {

	map<char,int>m;

	int n=word.size();
	for(int i=0;i<n;i++)
    {
        int value=word[i];


        m[word[i]]=(value-'a')+1;




    }
    int length;
    int counter1=0;
    int counter2=0;
    if(n%2==0)
    {
        length=word.size()/2;


        for(int i=0;i<length;i++)
        {
            counter1+=m[word[i]];
        }



        for(int j=length;j<n;j++)
        {
            counter2+=m[word[j]];
        }

    }
    else
    {

        length=(word.size()/2);
        int counter1=0;
        for(int i=0;i<length;i++)
        {
            counter1+=m[word[i]];
        }


        int counter2=0;
        for(int j=length+1;j<n;j++)
        {
            counter2+=m[word[j]];
        }
    }






	return counter1==counter2;
}

int main()
{

    string s;
    cin>>s;

    if(balanced(s))
    {
        cout<<"True"<<endl;
    }
    else
    {
        cout<<"False"<<endl;
    }





    return 0;
}
