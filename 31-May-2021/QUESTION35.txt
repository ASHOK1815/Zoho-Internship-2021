//
//Return the Sum of Two Numbers (on the Moon)
//
//When two numbers are added together, the strange Lunar arithmetic is used on the Moon.
//The Lunar sum of two numbers is not determined by the sum of their individual digits,
//but by the highest digit of the two taken into account at each step, in columnar form.

#include<bits/stdc++.h>
using namespace std;




int lunarSum(int num1, int num2) {
	std::vector<int>value1;
	std::vector<int>value2;

	int n=num1;
	int m=num2;

	while(n)
    {
        int k=n%10;
        value1.push_back(k);
        n=n/10;
    }

    while(m)
    {
        int k=m%10;
        value2.push_back(k);
        m=m/10;
    }

    if(value1.size()!=value2.size())
    {
        if(value1.size()<value2.size())
        {
            int k=value2.size()-value1.size();

            for(int i=0;i<k;i++)
            {
                value1.push_back(-1);
            }



        }
        else  if(value1.size()>value2.size())

         {
            int k=value1.size()-value2.size();

            for(int i=0;i<k;i++)
            {
                value2.push_back(-1);
            }




        }
    }


    reverse(value1.begin(),value1.end());
    reverse(value2.begin(),value2.end());

	std::string ans="";
	for(int i=0;i<value1.size();i++)
    {
        ans+=std::to_string(std::max(value1[i],value2[i]));
    }


	return std::atoi(ans.c_str());
}


int main()
{

    int num1,num2;
    cin>>num1>>num2;


    cout<<lunarSum(num1,num2);




   return 0;
}
