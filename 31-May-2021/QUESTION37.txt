//Longest Range in the List (Casual Version)

//Given an array of integers, find the length of the longest range of consecutive integers that are contained in the sorted version of the array.
//
//Here's an illustrative example. Consider the array:
//
//[4, 9, 10, 5, 17, 3, 8, 11, 1, 12, 18, 20]
//... which, after sorting, becomes:
//
//[1, 3, 4, 5, 8, 9, 10, 11, 12, 17, 18, 20]
//The longest consecutive subsequence is now clearly [8, 9, 10, 11, 12], which has length 5.

#include<bits/stdc++.h>
using namespace std;

int maxConsec(std::vector<int> arr) {

	int length=INT_MIN;
	std::set<int>set1;


    std::set<int>::iterator itr;

	for(int i=0;i<arr.size();i++)
    {
        set1.insert(arr[i]);
    }



     arr.clear();



    for (itr = set1.begin(); itr != set1.end(); itr++)
    {
        arr.push_back(*itr);
    }




	sort(arr.begin(),arr.end());

	for(int i=0;i<arr.size()-1;i++)
    {

       int counter=1;

       if(arr[i]==(arr[i+1]-1))
       {
           while(arr[i]==(arr[i+1]-1))
           {
               counter++;
               i++;
           }

           length=max(length,counter);

       }



    }


	return length;
}

int main()
{
    int n;
    cin>>n;


    std::vector<int>arr;

    for(int i=0;i<n;i++)
    {
        int a;
        cin>>a;
        arr.push_back(a);
    }


    cout<<maxConsec(arr);



    return 0;
}
