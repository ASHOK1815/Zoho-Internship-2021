//Stock Picker


//Create a function that takes an array of integers that represent the amount in dollars that a single stock is worth,
// and return the maximum profit that could have been made by buying stock on day x and selling stock on day y where y>x.
//
//If given the following array:
//
//[44, 30, 24, 32, 35, 30, 40, 38, 15]
//... your program should return 16 because at index 2 the stock was worth $24 and at the index 6 the stock was then worth $40,
//so if you bought the stock at 24 and sold it on 40, you would have made a profit of $16, which is the maximum profit that could
//have been made with this list of stock prices.
//
//If there is no profit that could have been made with the stock prices, then your program should return -1 (e.g. [[10, 9, 8, 2]] should return -1).


#include<bits/stdc++.h>
using namespace std;


int stockPicker(std::vector<int> arr) {

    int n = arr.size();
    int ans = 0;
    for(int i=0; i<n-1; i++){

        int value = arr[i+1];
        for(int j=i+2; j<n; j++)
        {
            value = max(value, arr[j]);
        }

        if(value > arr[i])
        {
           ans = max(ans, value - arr[i]);
        }

    }
    if(ans > 0)
    {
        return ans;
    }


    return -1;


}


int main()
{

    int n;
    cin>>n;
    std::vector<int>arr;

    for(int i=0;i<n;i++)
    {
        int a;
        cin>>a;
        arr.push_back(a);
    }


    cout<<stockPicker(arr);



    return 0;
}
