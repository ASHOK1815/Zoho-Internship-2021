//Diamond Shaped Array
//Create a function that returns an array that expands by 1 from 1 to the value of the input, and then reduces back to 1. Items in the lists will be the same as the length of the lists.
//
//Examples
//diamondArrays(1) ➞ [[1]]
//
//diamondArrays(2) ➞ [[1], [2, 2], [1]]
//
//diamondArrays(5) ➞ [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5, 5], [4, 4, 4, 4], [3, 3, 3], [2, 2], [1]]
//Notes
//N/A

#include<bits/stdc++.h>
using namespace std;

std::vector<std::vector<int>> diamondArrays(int x)
{
    vector<vector<int>>ans;


    for(int i=1;i<=x;i++)
    {
        vector<int>temp;
        for(int j=1;j<=i;j++)
        {
            temp.push_back(i);

        }
        ans.push_back(temp);

    }

     for(int i=x-1;i>=1;i--)
    {
        vector<int>temp;
        for(int j=1;j<=i;j++)
        {
            temp.push_back(i);

        }
        ans.push_back(temp);

    }


    return ans;

}


int main()
{

    int n;
    cout<<"Enter the number"<<endl;
    cin>>n;

    vector<vector<int>>ans=diamondArrays(n);


    for(int i=0;i<ans.size();i++)
    {
        for(int j=0;j<ans[i].size();j++)
        {
            cout<<ans[i][j]<<" ";
        }
        cout<<endl;
    }


    return 0;
}
