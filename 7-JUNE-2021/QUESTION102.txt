//Cluster Vowels, Single Out Consonants
//Write a function that takes in a word and splits the consonants one by one, but keeps the vowels in a cluster.
//
//Examples
//split("beautifully") ➞ ["b", "eau", "t", "i", "f", "u", "l", "l", "y"]
//
//split("spoonful") ➞ ["s", "p", "oo", "n", "f", "u", "l"]
//
//split("swimming") ➞ ["s", "w", "i", "m", "m", "i", "n", "g"]
//Notes
//Vowels are: a, e, i, o, u.
//All letters will be in lower case.


#include<bits/stdc++.h>

using namespace std;


std::vector<std::string> split(std::string word)
{
	map<char,int>m;

	m['a']=1;
	m['e']=1;
	m['i']=1;
	m['o']=1;
	m['u']=1;

	vector<string>ans;

	int i=0;

	string cons="";
	string vowel="";

	while(word[i]!='\0')
    {
        ans.push_back(cons);
        cons="";
        if(m[word[i]]!=0)
        {
            while(m[word[i]]!=0)
            {
                vowel+=word[i];


                i++;
            }
            i--;
            ans.push_back(vowel);

             vowel="";
        }
        else
        {
            cons+=word[i];
        }



        i++;
    }


    ans.push_back(cons);

    return ans;
}

int main()
{

    string s;
    cin>>s;

    vector<string>Ans=split(s);


    for(int i=0;i<Ans.size();i++)
    {
        cout<<Ans[i]<<" ";
    }





    return 0;
}
