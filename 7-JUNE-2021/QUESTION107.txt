//Holey Sort
//What do the numbers 4, 6, 8, 9 and 0 have in common? They all have holes in them! Notice how the number 8 contains not one, but two holes.
//
//Given an array of numbers, sort the array in accordance to how many holes occur in the number. It should be sorted in ascending order.
//
//Examples
//holeySort([44, 4, 444, 4444]) ➞ [4, 44, 444, 4444]
//
//holeySort([100, 888, 1660, 11]) ➞ [11, 100, 1660, 888]
//
//holeySort([8, 121, 41, 66]) ➞ [121, 41, 8, 66]
//Notes
//If two numbers have the same number of holes in them, sort them by the order they first appeared in.
//Despite the number 0 appearing to have two holes in certain fonts, it will only have one hole for the purposes of this challenge.



#include<bits/stdc++.h>

using namespace std;

std::vector<int> holeySort(std::vector<int> arr)
 {
	map<int,int>m;

	m[4]=1;
	m[6]=1;
	m[8]=1;
	m[9]=1;
	m[0]=1;

	map<int,vector<int>>finalans;

	for(int i=0;i<arr.size();i++)
    {
        int k=arr[i];
        int counter=0;
        while(k)
        {
            int value=k%10;
            if(m[value])
            {
                counter++;
            }
            k=k/10;
        }

        finalans[counter].push_back(arr[i]);

    }

    vector<int>ans;

    for(auto x:finalans)
    {
        
        for(int j=0;j<finalans[x.first].size();j++)
        {

           ans.push_back(finalans[x.first][j]);

        }
    }

    return ans;
}

int main()
{
    int n;
    cout<<"Enter the size of the array"<<endl;
    cin>>n;



    vector<int>Ans;

    for(int i=0;i<n;i++)
    {
        int a;
        cin>>a;
        Ans.push_back(a);
    }



    vector<int>arr=holeySort(Ans);

    for(int i=0;i<arr.size();i++)
    {
        cout<<arr[i]<<" ";
    }








    return 0;
}
