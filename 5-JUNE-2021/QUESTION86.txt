//One, Two, Skip a Few
//Create a function which calculates how many numbers are missing from an ordered number line.
//This number line starts at the first value of the array, and increases by 1 to the end of the number line, ending at the last value of the array.
//
//howManyMissing([1, 2, 3, 8, 9]) ➞ 4
//
//// The number line starts at 1 and ends at 9 (so the numbers 0 and 10 aren't missing from it).
//// The numbers missing from this line are 4, 5, 6, and 7.
//// 4 numbers are missing.
//Examples
//howManyMissing([1, 3]) ➞ 1
//
//howManyMissing([7, 10, 11, 12]) ➞ 2
//
//howManyMissing([1, 3, 5, 7, 9, 11]) ➞ 5
//
//howManyMissing([5, 6, 7, 8]) ➞ 0
//Notes
//If the number line is complete, or the array is empty, return 0


#include<bits/stdc++.h>
using namespace std;

int howManyMissing(std::vector<int> arr)
{
    map<int,int>m;


    int mn=INT_MAX;
    int mx=INT_MIN;

    for(int i=0;i<arr.size();i++)
    {
        mn=min(mn,arr[i]);
        mx=max(mx,arr[i]);

        m[arr[i]]++;

    }
    int counter=0;
    for(int i=mn;i<=mx;i++)
    {
        if(m[i]==0)
        {
            counter++;
        }
    }

    return counter;
}

int main()
{

    int n;
    cout<<"Enter the size of the array"<<endl;
    cin>>n;

    vector<int>arr;


    for(int i=0;i<n;i++)
    {
        int a;
        cin>>a;
        arr.push_back(a);
    }


    cout<<howManyMissing(arr);







    return 0;
}
